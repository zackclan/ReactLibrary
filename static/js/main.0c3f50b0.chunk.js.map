{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Book","_this","this","props","books","map","book","index","react_default","a","createElement","class","title","author","pages","type","value","id","checked","isRead","onChange","for","onClick","Component","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","myLibrary","handleChange","bind","assertThisInitialized","addBook","event","target","name","fieldValue","objectSpread","setState","library","toConsumableArray","splice","concat","preventDefault","_this3","role","data-toggle","aria-haspopup","aria-expanded","onSubmit","aria-labelledby","placeholder","App_Book","i","handleIsRead","deleteEntry","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c3f50b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Book extends Component {\n  render() {\n    return (\n      this.props.books.map((book,index) => {\n        return (\n        <div class=\"example-book\">\n          <p>{book.title}</p>\n          <p>{book.author}</p>\n          <p>{book.pages}</p>\n          <div class=\"form-check\">\n          <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\" checked={book.isRead}\n          onChange={() => this.props.onChange(index)}/>\n          <label class=\"form-check-label\" for=\"defaultCheck1\">\n            Read\n          </label>\n          </div>\n          <button type=\"button\"class=\"btn btn-danger deletebutton\" onClick={() => this.props.onClick(index)}>x</button>\n        </div>\n        )\n      })\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      myLibrary:[{\n        title:\"A Game of Thrones\",\n        author:\"George R.R. Martin\",\n        pages:\"756\",\n        isRead:true,\n      }],\n      value:{\n        pages:\"\",\n        title:\"\",\n        author:'',\n        isRead:false,\n      },\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.addBook = this.addBook.bind(this)\n  }\n\n  handleChange(event){\n    const target = event.target\n    const name = target.name\n    const fieldValue = target.type === 'checkbox' ? target.checked : target.value\n    let value = {...this.state.value}\n    value[name] = fieldValue\n    this.setState({value})\n\n  }\n  handleIsRead(index){\n    let library = [...this.state.myLibrary]\n    library[index].isRead = library[index].isRead? false : true;\n    this.setState({myLibrary:library})\n  }\n\n  deleteEntry(index){\n    let library = [...this.state.myLibrary]\n    library.splice(index,1)\n    this.setState({myLibrary:library})\n  }\n\n  addBook(event){\n    this.setState({myLibrary:[...this.state.myLibrary,this.state.value]})\n    this.setState({\n      value:{\n        pages:'',\n        title:'',\n        author:'',\n        isRead:false,\n      }\n    })\n    event.preventDefault();\n  }\n\n  \n  render() {\n    return (\n      <div>\n        <div class=\"header\">\n        <p>Library</p>\n      </div>\n        <div class=\"alert alert-success hidden\" role=\"alert\">\n          Your book has been added successfully!\n        </div>\n        <div class=\"library\">\n          <div class=\"top\">\n            <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"bookform\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              Add a book\n                </button>\n            <form onSubmit={this.addBook} class=\"dropdown-menu addform\" aria-labelledby=\"bookform\">\n              <div class=\"form-row\">\n                <div class=\"col\">\n                  <input name=\"title\" type=\"text\" class=\"form-control title\" placeholder=\"Title\" value={this.state.value.title} onChange={this.handleChange}/>\n                        </div>\n                </div>\n                <div class=\"form-row\">\n                  <div class=\"form-group col-md-9\">\n                  <input name=\"author\" type=\"text\" class=\"form-control author\" placeholder=\"Author\" value={this.state.value.author} onChange={this.handleChange}/>\n                        </div>\n                    <div class=\"form-group col-md-3\">\n                      <input name=\"pages\" type=\"text\" class=\"form-control pages\" placeholder=\"Pages\" value={this.state.value.pages} onChange={this.handleChange}/>\n                        </div>\n                    </div>\n                    <div class=\"form-group checkbox\">\n                      <div class=\"form-check\">\n                        <input name =\"isRead\"class=\"form-check-input checkread\" type=\"checkbox\" id=\"gridCheck\" checked={this.state.isRead} onChange={this.handleChange}/>\n                          <label class=\"form-check-label\" for=\"gridCheck\">\n                            Read\n                            </label>\n                        </div>\n                      </div>\n                      <button type=\"submit\" class=\"btn btn-primary addbook\">Add Book</button>\n                </form>\n                </div>\n                <Book\n                  onChange = {(i) => this.handleIsRead(i)}\n                  books={this.state.myLibrary}\n                  onClick = {(i) => this.deleteEntry(i)}\n                />\n              </div>\n                \n              </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}